---
title: "STAT 331 Portfolio"
author: "Skylar Richards"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

# from lab 3 Question 2 
data <- read_csv(here("data","teacher_evals.csv"))


```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# from practice activity 4
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 6, 
                      n_max = 192)


```

-   `txt`

```{r}
#| label: wd-1-txt
# from check in 2.3 
ages_tab <- read_table(file = here::here("Week 2", "Check-ins", "Ages_Data", "ages_tab.txt"))


```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
# from lab 2, Question 6

teacher_evals_clean |>
  filter(if_any(everything(), ~is.na(.))) |>
  select(course_id,teacher_id, everything())


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

# from lab 5

suspect_killer <- drivers_license|>
  filter(gender == "male",
         str_detect(plate_number, "H42W"))|>
  rename(license_id = id) |>
 inner_join(person, by = "license_id") |>
  inner_join(get_fit_now_member, by = c("id" = "person_id", "name" = "name"))|>
  rename(membership_id = id.y)|>
  inner_join(get_fit_now_check_in, by = "membership_id")|>
  filter(check_in_date == "20180109", # numeric filtering here
         str_detect(membership_id, "^48Z"))


```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# from lab 5

suspect_killer <- drivers_license|>
  filter(gender == "male",
         str_detect(plate_number, "H42W"))|> # String filtering here 
  rename(license_id = id) |>
 inner_join(person, by = "license_id") |>
  inner_join(get_fit_now_member, by = c("id" = "person_id", "name" = "name"))|>
  rename(membership_id = id.y)|>
  inner_join(get_fit_now_check_in, by = "membership_id")|>
  filter(check_in_date == "20180109",
         str_detect(membership_id, "^48Z")) #string filtering here
```

-   factor

```{r}
#| label: wd-3-factor

# from lab 5 

suspect_killer <- drivers_license|>
  filter(gender == "male", # factor filtering here
         str_detect(plate_number, "H42W"))|>

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# from lab 5

filtered_crime_scene_report <- crime_scene_report|>
  mutate(date = ymd(date))|> # convert dates into date format 
  filter(type == "murder",
         date == "2018-01-15",
         city == "SQL City") 

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

fish_challenge <- fish|>
  mutate(length = length/10) # mutating numeric here 

# from Challenge 7 Question 1
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) # mutating string here
  
# from lab 4 Question 3 

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

# from lab 4 Question 3 
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |> 
  mutate(region = fct_collapse(county_name,  "Superior California" = c("Butte", "Colusa", "El Dorado",
                                                         "Glenn", "Lassen", "Modoc",
                                                         "Nevada", "Placer", "Plumas",
                                                         "Sacramento", "Shasta", "Sierra",
                                                         "Siskiyou", "Sutter", "Tehama",
                                                         "Yolo", "Yuba", ...

                               # fct_collpase involves 20+ lines, shortened for readability 
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

filtered_crime_scene_report <- crime_scene_report|>
  mutate(date = ymd(date))

# from lab 5

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

# from lab 5

interview_witness <- filtered_person |> # Keep all filtered persons
  left_join(interview, 
            by = c("id" = "person_id"))
```

-   `right_join()`

```{r}
#| label: wd-5-right
# From lab 5

killer_interview <- interview |> # Keep all interviews, even those without a matching suspect_killer
  right_join(suspect_killer, 
             by = c("person_id" = "id"))

```

-   `inner_join()`

```{r}
#| label: wd-5-inner
# from lab 5

interview_witness <- filtered_person|> #get interviews of witnesses
  inner_join(interview,
             by = c("id" = "person_id"))


```

-   `full_join()`

```{r}
#| label: wd-5-full
# from lab 5
  filter(gender == "male",
         str_detect(plate_number, "H42W"))|>
  rename(license_id = id) |>
 full_join(person, by = "license_id") |>
  inner_join(get_fit_now_member, by = c("id" = "person_id", "name" = "name"))|>
  rename(membership_id = id.y)|>
  inner_join(get_fit_now_check_in, by = "membership_id")|>
  filter(check_in_date == "20180109",
         str_detect(membership_id, "^48Z"))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# from lab 5

suspect_boss <- person |>
  semi_join(
    facebook_event_checkin |> filter(event_name == "SQL Symphony Concert", str_detect(date, "201712")) |> group_by(person_id) |> filter(n() == 3),
    by = c("id" = "person_id")

```

-   `anti_join()`

```{r}
#| label: wd-6-anti
# from lab 5
interview_boss <- suspect_boss|>
 anti_join(interview, by = c("id" = "person_id")) # see if boss was interviewed at all 

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

results_long <- pivot_longer(
  results_table,
  cols = everything(),
  names_to = "ncorrect",
  values_to = "count")

# from lab 9 Question 3 
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

survey_data_type <- surveys|>
  map_chr(class)|>
  enframe(name = "Variable", value = "DataType")|>
  pivot_wider(names_from = Variable, values_from = DataType)

# from lab 8 Question 1 
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

Tables in Challenge 9, Entirety of lab 4 and 5, using here package in lab 2.

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

ggplot(all_simulations, aes(x = simulated_means)) +
  geom_histogram(binwidth = 0.2,
                 fill = "#FFE4E1",
                 color = "black",
                 alpha = 0.7) +
  facet_wrap(~n, scales = "free_y", 
             labeller = as_labeller(c(`10` = "n = 10",
                                      `100` = "n = 100",
                                      
                                      `1000` = "n = 1000",
                                      `10000` = "n = 10000"))) +
  labs(
    title = "Distribution of Simulated Means by Sample Size",
    x = "Simulated Means",
    y = "Frequency"
)

# from lab 9 Question 8 

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

suspect_killer <- drivers_license|>
  filter(gender == "male",
         str_detect(plate_number, "H42W"))|>
  rename(license_id = id) |>
 inner_join(person, by = "license_id") |>
  inner_join(get_fit_now_member, by = c("id" = "person_id", "name" = "name"))|>
  rename(membership_id = id.y)|>
  inner_join(get_fit_now_check_in, by = "membership_id")|>
  filter(check_in_date == "20180109",
         str_detect(membership_id, "^48Z"))

# from lab 5

```

-   Example of function formatting

```{r}
#| label: r-2-3
rescale_column <- function(data_frame, ...) {
  data_frame |>
    mutate(across(c(...), ~ rescale_01(.)))
}

# From Lab 7 Question 8 
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example
# from lab 7 Question 4
rescale_01 <- function(value){
  if ((length(value) >= 1) & is.numeric(value)) {
   return((value = (value - min(value, na.rm = TRUE)) / 
           (max(value, na.rm = TRUE) - min(value, na.rm = TRUE))))
}}

#Only returns the adjusted value if the input value is numeric and greater than or equal to 1.
```

-   Example of function stops

```{r}
#| label: r-3-function-stops
simulate_means <- function(n = 100, df = 1) {
  if (!is.numeric(n) || n <= 0 || n != round(n)) {
    stop("`n` must be a positive integer.")
  }
  if (!is.numeric(df) || df <= 0) {
    stop("`df` must be a positive number.")
  }
  

  map_dbl(.x = seq_len(n), 
          .f = ~rchisq(n = 100, df = df) |> mean())
}

  # from lab 9 Question 4, resistant to change in n and df values, prevents non numeric, negative, and float inputs.

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
# from lab 4 Question 7

ggplot(ca_childcare, aes(x = mhi_2018, y = mc_infant)) +
  geom_point(color = "blue", size = 3, alpha = 0.4) + 
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(
    title = "Full Time median weekly price for center-based childcare for an infant in California",
    x= "Median household income (2018 dollars)",
    y="")+
theme_minimal()

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# from lab 4 Question 5

ggplot(lowest_infant_care_2018, aes(x=median_care, y=reorder(region, -median_care)))+
  geom_col(fill = "steelblue")+
  facet_wrap(~study_year)+
  ggtitle("2018 Infant care cost by region") +
  ylab("") +
  xlab("Median Care cost in 2018 dollars") +
  theme_minimal()

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat
# from lab 4 Question 5 

ggplot(lowest_infant_care, aes(x=median_care, y=reorder(region, -median_care)))+
  geom_col(fill = "steelblue")+
  facet_wrap(~study_year)+
  ggtitle("2008 vs 2018 Infant care cost by region") +
  ylab("") +
  xlab("Median Care cost in 2018 dollars") +
  theme_minimal()
```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

ggplot(median_prices_regional, aes(x=study_year,y=price_care, color = region))+
   geom_point(position = position_dodge(width = 0)
              , alpha = 0.8,
              size = 0.5) +  
  geom_smooth(method = "loess",
              se = TRUE,
              alpha = 0.5)+
  facet_wrap(~ age_group,
             nrow = 1)+
  scale_y_continuous()+
  labs(
  title = "Weekly Median Price for Center-Based Childcare ($)",
  x = "Study Year",
  y = "",
  color = "California Region")

# from lab 4 Question 6


```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

# from lab 2 Question 16

ggplot(data = surveys,
       mapping = aes(x=species, y=weight)) +
      geom_jitter(color = "steelblue", alpha = 0.18) + 
      geom_boxplot(outliers = FALSE, alpha = 0.6) +
      labs(x = "Species of Rodent",
           y = "",
           title = "Weight of Rodent in Grams") +
      theme(axis.text.x = element_text(angle=45,hjust= 1)) 
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
# from lab 4 Question 6, beginning of plot code cut off to make more readable

theme(
    axis.text = element_text(size = 6), # adjustment of text size 
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1,
    legend.title = element_text(size = 10), # text size adjustment 
    legend.text = element_text(size = 8), # text size adjustment 
    legend.key.height = unit(-1,"cm"), # changing of location to make more readable
    legend.key.size = unit(1,"cm"),
    legend.key.spacing.y = unit(0.1,"cm"), # adjusted spacing to make more readable
    panel.background = element_rect(fill = "white", color = NA),
    panel.grid = element_line(color = "grey", size = 0.15),
    strip.background = element_rect(fill = "grey", color = "black", size = 1),
    title = element_text(size = 7.5) # changing to make more readable 
    )


```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
# from lab 4 Question 6
median_prices_regional <- ca_childcare |> # change names and create new variable of age gorup 
  rename("Infant" = "mc_infant",
         "Toddler" = "mc_toddler",
         "Preschool" = "mc_preschool")|>
  pivot_longer(
    cols = c(Infant,
             Toddler,
             Preschool),
    names_to = "age_group",
    values_to = "price_care")|>
  group_by(region,study_year,age_group)
  
median_prices_regional <- median_prices_regional|> #Set order for graphs 
  mutate(age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool")))

median_prices_regional <- median_prices_regional |> #Set Order of regions
  mutate(region = factor(region, levels = c("San Francisco Bay Area",
                                            "Orange County",
                                            "Los Angeles County",
                                            "Northern San Joaquin Valley",
                                            "Central Coast",
                                            "Inland Empire",
                                            "Superior California",
                                            "Southern San Joaquin Valley",
                                            "San Diego - Imperial",
                                            "North Coast"
                                            )))


ggplot(median_prices_regional, aes(x=study_year,y=price_care, color = region))+
   geom_point(position = position_dodge(width = 0)
              , alpha = 0.8,
              size = 0.5) +  
  geom_smooth(method = "loess",
              se = TRUE,
              alpha = 0.5)+
  facet_wrap(~ age_group,
             nrow = 1)+
  scale_y_continuous()+
  labs(
  title = "Weekly Median Price for Center-Based Childcare ($)",
  x = "Study Year",
  y = "",
  color = "California Region",
  fill = "region")+
  scale_x_continuous(breaks = seq(2008,2018,2))+
  scale_y_continuous(limits = c(100,500))+
  scale_color_manual(values = c("San Francisco Bay Area" = "green",
                                "Orange County" = "grey",
                                "Los Angeles County" = "pink",
                                "Northern San Joaquin Valley" = "orange",
                                "Central Coast" = "yellow",
                                "Inland Empire" = "blue",
                                "Superior California" = "maroon",
                                "Southern San Joaquin Valley" = "red",
                                "San Diego - Imperial" = "brown",
                                "North Coast" = "darkgrey"))+
  theme(
    axis.text = element_text(size = 6),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1,
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8),
    legend.key.height = unit(-1,"cm"),
    legend.key.size = unit(1,"cm"),
    legend.key.spacing.y = unit(0.1,"cm"),
    panel.background = element_rect(fill = "white", color = NA),
    panel.grid = element_line(color = "grey", size = 0.15),
    strip.background = element_rect(fill = "grey", color = "black", size = 1),
    title = element_text(size = 7.5)
    )


```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
# from lab 9 Quesetion 8

ggplot(all_simulations, aes(x = simulated_means)) +
  geom_histogram(binwidth = 0.2,
                 fill = "#FFE4E1",
                 color = "black",
                 alpha = 0.7) +
  facet_wrap(~n, scales = "free_y", 
             labeller = as_labeller(c(`10` = "n = 10",
                                      `100` = "n = 100",
                                      
                                      `1000` = "n = 1000",
                                      `10000` = "n = 10000"))) +
  labs(
    title = "Distribution of Simulated Means by Sample Size",
    x = "Simulated Means",
    y = "Frequency"
)


```

-   I can use annotations

```{r}
#| label: dvs-3-2
# from lab 4 Question 5
ggplot(lowest_infant_care_2018, aes(x = median_care, y = reorder(region, -median_care))) +
  geom_col(fill = "steelblue") +
  geom_text(aes(label = median_care), hjust = -0.2, color = "black", size = 3) +
  facet_wrap(~study_year) +
  ggtitle("2018 Infant Care Cost by Region") +
  ylab("") +
  xlab("Median Care Cost in 2018 Dollars") +
  theme_minimal()

```

-   I can be creative...

```{r}
#| label: dvs-3-3
# from challenge 7 Question 4
ggplot(conditioned_fish,
       aes(x = year, y = condition_index, color = species))+
  geom_point(alpha = 0.1)+
  geom_smooth(method = "loess", se = FALSE, aes(color = species))+
  facet_wrap(~ section)+
  labs(
    title = "Condition Index by year, section, and species",
    x = "Year",
    y = ""
  )
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# from lab 4 Question 5

lowest_infant_care <- ca_childcare|>
  filter(study_year %in% c(2018,2008))|>
  group_by(study_year, region)|>
  summarize(median_care = median(mc_infant), .groups = "drop")|>
  arrange(desc(median_care))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

missing_values <- fish|>
 summarise(
    total_missing_observations = sum((across(everything(), ~ sum(is.na(.))))),
    variables_missing = names(which(colSums(is.na(fish))>0))
  )
  
# from lab 7 Question 1

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

missing_values_fish <- fish|>
  map_int(~sum(is.na(.)))|>
  enframe(name = "Variable Name", value = "Number of Missing Values")

# from lab 8 Question 4

```

-   Example 2

```{r}
#| label: dvs-5-2
summary_table <- evals|>
  group_by(teacher_id)|>
  summarize(
    sex = first(sex),
    seniority = mean(seniority, na.rm = TRUE),
    academic_degree = first(academic_degree),
    .groups = "drop"
  )|>
  mutate(seniority_level = if_else(seniority <= 4, "Junior", "Senior"))|>
  count(sex,seniority_level, academic_degree)|>
  pivot_wider(names_from = c(sex, seniority_level, academic_degree), values_from = n)|>
  summarize(
    Male = sum(c(male_Junior_dr,
                 male_Junior_ma,
                 male_Junior_no_dgr,
                 male_Junior_prof,
                 male_Senior_dr,
                 male_Senior_ma,
                 male_Senior_no_dgr,
                 male_Senior_prof), na.rm = TRUE),
  Female = sum(c(female_Junior_dr,
                 female_Junior_ma,
                 female_Junior_no_dgr,
                 female_Junior_prof,
                 female_Senior_dr,
                 female_Senior_ma), na.rm = TRUE),
  "Junior (Less than 4 years)"  = sum(c(male_Junior_dr,
                 male_Junior_ma,
                 male_Junior_no_dgr,
                 male_Junior_prof,
                 female_Junior_dr,
                 female_Junior_ma,
                 female_Junior_no_dgr,
                 female_Junior_prof), na.rm = TRUE),
   "Senior (More than 4 years)" = sum(c(male_Senior_dr,
                 male_Senior_ma,
                 male_Senior_no_dgr,
                 male_Senior_prof,
                 female_Senior_dr,
                 female_Senior_ma), na.rm = TRUE),
  "No Degree" = sum(c(male_Senior_no_dgr,
                    male_Junior_no_dgr,
                    female_Junior_no_dgr), na.rm = TRUE),
  Masters = sum(c(male_Senior_ma,
                    male_Junior_ma,
                    female_Junior_ma,
                    female_Senior_ma), na.rm = TRUE),
  Doctorate = sum(c(male_Senior_dr,
                    male_Junior_dr,
                    female_Junior_dr,
                    female_Senior_dr), na.rm = TRUE),
  Professor = sum(c(male_Senior_prof,
                    male_Junior_prof,
                    female_Junior_prof), na.rm = TRUE)
  )
# from lab 8 Question 3
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1
# from lab 4 Question 5

combined_lowest <-bind_rows(
  lowest_2018,
  lowest_2008)|>
  rename("Lowest Median Regional Price for Infant care in California" = "median_care",
         "Year" = "study_year")
print(combined_lowest)

```

-   Example 2

```{r}
#| label: dvs-6-2
pretty_summary_table_gt <- summary_table |>
  gt() |>
  tab_header(
    title = "Instructor Evaluations Demographics"
  ) |>
  tab_style(
    style = cell_fill(color = "lightgray"),
    locations = cells_body(rows = seq(1, nrow(summary_table), 2))
  ) |>
  tab_options(
    table.font.size = px(14),
    table.border.top.color = "black",
    table.border.top.width = px(2),
    table.border.bottom.color = "black",
    table.border.bottom.width = px(2),
    table.border.left.color = "black",
    table.border.left.width = px(2),
    table.border.right.color = "black",
    table.border.right.width = px(2),  
    row.striping.include_table_body = TRUE,  
    row.striping.background_color = "lightgray", 
    data_row.padding = px(5),  
    column_labels.font.size = px(14), 
    column_labels.font.weight = "bold",
    column_labels.background.color = "lightblue", 
    table.width = pct(100)  
  )

# from lab 9 GT table
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

pretty_summary_table_gt <- summary_table |>
  gt() |>
  tab_header(
    title = "Instructor Evaluations Demographics"
  ) |>
  tab_style(
    style = cell_fill(color = "lightgray"),
    locations = cells_body(rows = seq(1, nrow(summary_table), 2))
  ) |>
  tab_options(
    table.font.size = px(14),
    table.border.top.color = "black",
    table.border.top.width = px(2),
    table.border.bottom.color = "black",
    table.border.bottom.width = px(2),
    table.border.left.color = "black",
    table.border.left.width = px(2),
    table.border.right.color = "black",
    table.border.right.width = px(2),  
    row.striping.include_table_body = TRUE,  
    row.striping.background_color = "lightgray", 
    data_row.padding = px(5),  
    column_labels.font.size = px(14), 
    column_labels.font.weight = "bold",
    column_labels.background.color = "lightblue", 
    table.width = pct(100)  
  )

# from lab 9 GT Table
```

-   Example 2

```{r}
#| label: dvs-7-2
pretty_summary_table_kable <- summary_table|>
   kable(caption = "Instructor Evaluations Demographics") |>
   kable_styling(bootstrap_options = c("striped", "hover", "condensed", "bordered"), 
                 full_width = TRUE, 
                 font_size = 14)

# from lab 9 Kable Table
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

rescale_column <- function(data_frame, ...) {
  data_frame |>
    mutate(across(c(...), ~ rescale_01(.)))
}

# from lab 7 Question 8
```

-   `across()`

```{r}
#| label: pe-1-across
missing_values <- fish|>
 summarise(
    total_missing_observations = sum((across(everything(), ~ sum(is.na(.))))),
    variables_missing = names(which(colSums(is.na(fish))>0))
  )

# lab 7 Question 1
```

-   `map()` functions

```{r}
#| label: pe-1-map-1

missing_values_fish <- fish|>
  map_int(~sum(is.na(.)))|>
  enframe(name = "Variable Name", value = "Number of Missing Values")

# from lab 7 Question 1
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1
rescale_01 <- function(value){
  if ((length(value) > 1) & is.numeric(value)) {
   (value = (value - min(value, na.rm = TRUE)) / 
           (max(value, na.rm = TRUE) - min(value, na.rm = TRUE)))
  }}

# from lab 7 Question 4
```

-   Function that operates on data frames

```{r}
#| label: pe-2-2
rescale_column <- function(data_frame, ...) {
  data_frame |>
    mutate(across(c(...), ~ rescale_01(.)))
}

# from lab 7 Question 8
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

rescale_column <- function(data_frame, ...) {
  data_frame |>
    mutate(across(c(...), ~ rescale_01(.)))
}

# from lab 7 Question 8 
```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1
# from lab 8 Question 1

survey_data_type <- surveys|>
  map_chr(class)|>
  enframe(name = "Variable", value = "DataType")|>
  pivot_wider(names_from = Variable, values_from = DataType)
```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

# from lab 9 Question 6

all_simulations <- grid |> 
  mutate(simulated_means = pmap(.l = list(n = n, df = df), 
                                .f = simulate_means)
         ) |> 
  unnest(simulated_means) 
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# from lab 8 Question 1, pivot_wider supercedes spread(), pipe operator used to avoid intermittent variables.

survey_data_type <- surveys|>
  map_chr(class)|>
  enframe(name = "Variable", value = "DataType")|>
  pivot_wider(names_from = Variable, values_from = DataType)


```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
# from lab 7 Question 2
fish |>
  filter(is.na(weight)) |>
  group_by(year, section, trip) |>
  summarise(missing_count = n(), .groups = "drop")|>
  ggplot(aes(x = year, y = section, fill = missing_count)) +
  geom_tile(color = "white") +
  facet_wrap(~ trip) +
  scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey90") +
  labs(
    title = "Trip",
    x = "Year",
    y = "Section",
    fill = "Missing Count")+
  theme(plot.title = element_text(hjust = 0.5))

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

randomBabies <- function(nBabies = 4){
  step1 <- sample(1:nBabies, nBabies, replace = FALSE)
  step2 <- sum(step1 == 1:nBabies)
  return(step2)
  
# from lab 9 Question 1
```

-   Example 2

```{r}
#| label: dsm-1-2
simulate_means <- function(n = 100, df = 1) {
  if (!is.numeric(n) || n <= 0 || n != round(n)) {
    stop("`n` must be a positive integer.")
  }
  if (!is.numeric(df) || df <= 0) {
    stop("`df` must be a positive number.")
  }
  

  map_dbl(.x = seq_len(n), 
          .f = ~rchisq(n = 100, df = df) |> mean())
}
# from lab 9 Question 4
```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# from lab 2 Question 17

species_mod <- aov()
summary(species_mod)
```

-   Example 2

```{r}
#| label: dsm-2-2

# from challenge 3 Question 3
chisq.test(teacher_evals_compare$SET_level, teacher_evals_compare$sen_level)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

One of the biggest ways of revising my thinking was through streamlining operations. I accomplished this mostly through reducing the number of temporary objects found in my code which helps compress operations and keeps code tidy. Another way I have revised my thinking is how I think about my approach to issues, rather than trying to work front to back I think about what I need in the last step and then move backwards from there in terms of how I need to structure my process.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

Feedback that led to new code that was included in the portfolio is written in bolt and italics above the section it is used.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

The biggest way I have extended my thinking is how I consider data organization to help it be easier to process and/or understand. organizing the data in a way which reduces the number of required transformations or joining of datasets helps the raw data be easier to analyze.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

Often times during practice activities in class groups nearby will ask for help and instead of providing them the answer directly I will help lead them to finding it themselves. From peer review I thought my best feedback was the following (for lab 3) "Generally the lab does a good job accomplishing what it is supposed to however there are a few places to improve in terms of how someone interpreting the document could be helped out. The first big thing is to give some textual context of the tibble tables so they can know what they are saying. Usually just one line of text would make it clear what each table is displaying. When summarizing the teacher demographic it may be useful to use a graph in some situations as it will help a viewer have a greater understanding of the distributions within the demographic. Overall great work - just consider a viewer who lacks context of the lab when finalizing document.". I thought this was the best because I was able to involve not only helping them think about the correct code but also the way that they would use similar code in the future when creating reports.

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

I think the most beneficial aspect is being exposed to different people's way of thinking about the approach to a problem. This helps both in communicating goals/processes to people who think differently and also help expand my own line of thinking. I also think I learned what a bad partner felt like which helped motivate me to adjust to how different people function and focus on the collaboration rather than purely the end objective.
