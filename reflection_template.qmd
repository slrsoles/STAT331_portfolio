---
title: "STAT 331 Portfolio"
author: "Skylar Richards"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

# from lab 3 
data <- read_csv(here("data","teacher_evals.csv"))


```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# from practice activity 4
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 6, 
                      n_max = 192)


```

-   `txt`

```{r}
#| label: wd-1-txt
# from check in 2.3 
ages_tab <- read_table(file = here::here("Week 2", "Check-ins", "Ages_Data", "ages_tab.txt"))


```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2



```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

# from lab 5

suspect_killer <- drivers_license|>
  filter(gender == "male",
         str_detect(plate_number, "H42W"))|>
  rename(license_id = id) |>
 inner_join(person, by = "license_id") |>
  inner_join(get_fit_now_member, by = c("id" = "person_id", "name" = "name"))|>
  rename(membership_id = id.y)|>
  inner_join(get_fit_now_check_in, by = "membership_id")|>
  filter(check_in_date == "20180109", # numeric filtering here
         str_detect(membership_id, "^48Z"))


```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# from lab 5

suspect_killer <- drivers_license|>
  filter(gender == "male",
         str_detect(plate_number, "H42W"))|>
  rename(license_id = id) |>
 inner_join(person, by = "license_id") |>
  inner_join(get_fit_now_member, by = c("id" = "person_id", "name" = "name"))|>
  rename(membership_id = id.y)|>
  inner_join(get_fit_now_check_in, by = "membership_id")|>
  filter(check_in_date == "20180109",
         str_detect(membership_id, "^48Z")) #string filtering here
```

-   factor

```{r}
#| label: wd-3-factor
# from lab 4
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |> # removes county and blank space before
  mutate(region = fct_collapse(county_name,  "Superior California" = c("Butte", "Colusa", "El Dorado",
                                                         "Glenn", "Lassen", "Modoc",
                                                         "Nevada", "Placer", "Plumas",
                                                         "Sacramento", "Shasta", "Sierra",
                                                         "Siskiyou", "Sutter", "Tehama",
                                                         "Yolo", "Yuba", ...

                               # fct_collpase involves 20+ lines, shortened for readability 
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# from lab 5

filtered_crime_scene_report <- crime_scene_report|>
  mutate(date = ymd(date))|> # convert dates into date format 
  filter(type == "murder",
         date == "2018-01-15",
         city == "SQL City") 

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

```

-   Example 2

```{r}
#| label: dvs-6-2

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
